#!/usr/bin/env python3

# Global imports
import sys
import os
import os.path as path
from subprocess import run, DEVNULL, PIPE

# Conjure-up specific
sys.path.insert(0, '/usr/share/conjure-up/hooklib')
import juju  # noqa
from writer import log, success, fail, error  # noqa
import utils  # noqa

SCRIPTPATH = path.dirname(path.abspath(__file__))
NOVARC = path.join(SCRIPTPATH, 'novarc')


def ssh_genkey(ssh_privkey):
    """ Generates sshkey
    """
    cmd = "ssh-keygen -N '' -f {0}".format(ssh_privkey)
    out = run(cmd, shell=True, stdout=DEVNULL, stderr=PIPE)
    if out.returncode != 0:
            fail("Unable to generate key: {0}".format(out.stderr.decode()))


def main():
    credentials = utils.parse_openstack_creds(NOVARC)

    ssh_pubkey = path.expanduser(os.environ.get(
        'SSHPUBLICKEY',
        path.expanduser('~/.ssh/id_rsa.pub')))
    ssh_privkey = path.splitext(ssh_pubkey)[0]

    if not ssh_privkey:
        log.debug("No ssh private key found, generating our own.")
        ssh_genkey(ssh_privkey)

    log.debug("Checking for ssh public key: {}".format(ssh_pubkey))
    if path.isfile(ssh_pubkey):
        cmd = ("openstack keypair show ubuntu-keypair")
        ret = run(cmd, shell=True,
                  stdout=DEVNULL,
                  stderr=PIPE,
                  env=credentials)
        if ret.returncode == 0:
            success("ssh keypair already exists in the cloud")

        cmd = ("openstack keypair create --public-key {} "
               "ubuntu-keypair".format(ssh_pubkey))
        ret = run(cmd, shell=True,
                  stdout=DEVNULL,
                  stderr=PIPE,
                  env=credentials)
        if ret.returncode > 0:
            fail("Unable to add public ssh key, maybe "
                 "ssh-keygen needs to be run")
        success("SSH Keypair complete")

    fail("Could not find any ssh keys to import, please run "
         "ssh-keygen in another terminal before re-executing this step.")


if __name__ == "__main__":
    main()
